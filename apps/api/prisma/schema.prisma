datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  role          String         @default("student")
  is_active     Boolean        @default(true)
  organizationId String
  organization  Organization   @relation(fields: [organizationId], references: [id])
  courses       Course[]
  quizzes       Quiz[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([organizationId])
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  domain      String?
  is_active   Boolean     @default(true)
  users       User[]
  courses     Course[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Course {
  id            String      @id @default(cuid())
  title         String
  description   String?
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  creatorId     String
  creator       User        @relation(fields: [creatorId], references: [id])
  materials     Material[]
  quizzes       Quiz[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([organizationId])
  @@index([creatorId])
}

model Material {
  id          String      @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  embedding   Unsupported("vector(1536)")?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([courseId])
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  questions   Json[]
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  score       Float?
  completed   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([courseId])
  @@index([userId])
}
